// === Autowatering.cpp ===
#include <Arduino.h> 
#include "nRF24L01.h"
#include "RF24.h"
#include <AutoWattering.h>
#include "NtpServer.h"
#include <string.h> 

#define CH_NUM 110   // –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø—Ä–∏—ë–º–Ω–∏–∫–æ–º)
//--------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------

//--------------------- –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í -----------------------
// –£–†–û–í–ï–ù–¨ –ú–û–©–ù–û–°–¢–ò –ü–ï–†–ï–î–ê–¢–ß–ò–ö–ê
// –ù–∞ –≤—ã–±–æ—Ä RF24_PA_MIN, RF24_PA_LOW, RF24_PA_HIGH, RF24_PA_MAX
#define SIG_POWER RF24_PA_HIGH

// –°–ö–û–†–û–°–¢–¨ –û–ë–ú–ï–ù–ê
// –ù–∞ –≤—ã–±–æ—Ä RF24_2MBPS, RF24_1MBPS, RF24_250KBPS
// –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–∞ –Ω–∞ –ø—Ä–∏—ë–º–Ω–∏–∫–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–µ!
// –ø—Ä–∏ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–º–µ–µ–º —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å!!
// –í–ù–ò–ú–ê–ù–ò–ï!!! enableAckPayload –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ù–ê –°–ö–û–†–û–°–¢–ò 250 kbps!
#define SIG_SPEED RF24_1MBPS
//--------------------- –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í -----------------------

//--------------------- –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ----------------------
#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"
RF24 radio(9, 10); // "—Å–æ–∑–¥–∞—Ç—å" –º–æ–¥—É–ª—å –Ω–∞ –ø–∏–Ω–∞—Ö 9 –∏ 10 –î–ª—è –£–Ω–æ
//RF24 radio(9, 53); // –¥–ª—è –ú–µ–≥–∏
//--------------------- –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ----------------------

//--------------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï ----------------------
byte address[][6] = {"1Node", "2Node", "3Node", "4Node", "5Node", "6Node"}; // –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç—Ä—É–±

int transmit_data[2];     // –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
int telemetry[2];         // –º–∞—Å—Å–∏–≤ –ø—Ä–∏–Ω—è—Ç—ã—Ö –æ—Ç –ø—Ä–∏—ë–º–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
byte rssi;
int trnsmtd_pack = 1, failed_pack;
unsigned long RSSI_timer;

Ntp ntp;
//--------------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï ----------------------



void radioSetup() {
  radio.begin();              // –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
  radio.setAutoAck(1);        // —Ä–µ–∂–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—ë–º–∞, 1 –≤–∫–ª 0 –≤—ã–∫–ª
  radio.setRetries(0, 15);    // (–≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–æ–π –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è, —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫)
  radio.enableAckPayload();   // —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç—Å—ã–ª–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª
  radio.setPayloadSize(32);   // —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞, –≤ –±–∞–π—Ç–∞—Ö
  radio.openWritingPipe(address[0]);   // –º—ã - —Ç—Ä—É–±–∞ 0, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
  radio.setChannel(CH_NUM);            // –≤—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª (–≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç —à—É–º–æ–≤!)
 radio.setPALevel (RF24_PA_HIGH);   // —É—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞. –ù–∞ –≤—ã–±–æ—Ä RF24_PA_MIN, RF24_PA_LOW, RF24_PA_HIGH, RF24_PA_MAX
  radio.setDataRate (RF24_1MBPS); // —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–º–µ–Ω–∞. –ù–∞ –≤—ã–±–æ—Ä RF24_2MBPS, RF24_1MBPS, RF24_250KBPS
  // –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–∞ –Ω–∞ –ø—Ä–∏—ë–º–Ω–∏–∫–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–µ!
  // –ø—Ä–∏ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–º–µ–µ–º —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å!!

  radio.powerUp();         // –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
  radio.stopListening();   // –Ω–µ —Å–ª—É—à–∞–µ–º —Ä–∞–¥–∏–æ—ç—Ñ–∏—Ä, –º—ã –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫
}










void Wattering::begin() {
  radioSetup();

}


void Wattering::updateFlags(const char* day, bool value, int hour, int delay) {
    chosen_hour = hour;
    plant_delay = delay;
    if (value && day != nullptr) {
        strncpy(planting_day, day, sizeof(planting_day) - 1);
        planting_day[sizeof(planting_day) - 1] = '\0';

        Serial.print("üìå Watering set to: ");
        Serial.println(planting_day);
    }
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –ø–æ—Å–∞–¥–∫–∏, –≤—ã–∑–≤–∞—Ç—å plant()
void Wattering::update() {  
    const char* currentDay = ntp.getDay();  // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π –æ–±—ä–µ–∫—Ç ntp
    int currentHour = ntp.getHours();
    if (currentDay == nullptr) {
        Serial.println("‚ö†Ô∏è currentDay is null!");
        return;
    }


    if (planting_day[0] == '\0') {
        Serial.println("‚ö†Ô∏è planting_day is empty!");
        return;
    }

   

    if (strcmp(planting_day, currentDay) == 0 and chosen_hour == currentHour) {
        plant_flag = 1;
    }

    if(plant_flag){
        plant();
        //–ø–æ—Ç–æ–º –∫–æ–≥–¥–∞ plant() –≤—ã—à–ª–µ—Ç –≤—Å–µ –∏–Ω—Ñ—É –∏ –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å—Å—è —Ç–æ–≥–¥–∞ —Å—Ç–∞–≤–∏–º plant_Flag –≤ –Ω–æ–ª—å
    }


      for (int i = 0; i < 2; i++) {               // –≤ —Ü–∏–∫–ª–µ –æ—Ç 0 –¥–æ —á–∏—Å–ª–∞ –∫–∞–Ω–∞–ª–æ–≤
    if (transmit_data[i] != latest_data[i]) { // –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ transmit_data
      flag = 1;                               // –ø–æ–¥–Ω—è—Ç—å —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–∞–¥–∏–æ
      latest_data[i] = transmit_data[i];      // –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    }
  }

  if (flag == 1) {
    radio.powerUp();    // –≤–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫
    radio.write(&transmit_data, sizeof(transmit_data)); // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ —Ä–∞–¥–∏–æ
    flag = 0;           //–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–ª–∞–≥
    radio.powerDown();  // –≤—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫
  }
}



void Wattering::plant(){
  transmit_data[0] = 1;//–ø–∏—à–µ–º —á—Ç–æ –ø–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å
  transmit_data[1] = plant_delay;




}




